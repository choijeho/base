최종 결론1.
파이썬 으로 mobile, deskop app, linux app 만들 수 있음.
하드웨어 제어(BT, opencv, tensorflow..) 등 기존 부분은 파이썬으로 두고,
ui(모바일/데스크/리눅스) 부분은 flutter 기능을 사용할 수 있음.
flutter를 배우고 나서, flet으로 flutter 의 클래스를 가지고 옴.
결과물은 google의 느낌이 남.
추가: ui는 flutter flow를 이용하면 기본적인 위젯은 drap-drop으로 디자인 가능->후에 코드를 수정할 수 있음.
따라서. 1. flutter를 배운다. 2. flet을 배운다. 3. flutter flow를 배운다 4. flet/flutter로 android 권한허용방법 배운다.

최종 결론2.
IDE는 VS Code, Android Studio 둘 중 아무거나 사용해도 된다. 에뮬레이터는 android studio로 열린다.
androi의 권한 허용은 flutter methodchannel을 통해서 한다.
flet, flutter에서는 chart 기능도 있고, 배경이미지 위에 그림그릴 수 있다.
보여주기 식이면 fluter로만 코딩하고, 계산/opencv등 기능이 필요하면 flet으로 한다.

1. 종합: 윈도우pc, 라즈베리파이 app 작성. 파일 전송 등 참고 사이트
 flutter-pi 실행하고, 빌드된 파일을 실행하는 환경임.
 flutter-pi는 .sh 로 실행.
https://www.youtube.com/watch?v=Y6sInr2TwOQ

2. 윈도우에서 flutter app 배포, visual studio 사용
https://www.youtube.com/watch?v=YhF3k68qpOU&t=11s

현장에서 컴파일 속도 단축 가능-win pc에서 컴파일함.
파일 바이너리화 가능

3. flet 을 이용하여 파이썬 프로그래밍 만으로 flutter 수준의 ui 만듬
https://www.youtube.com/watch?v=-mZP91Y3naY&list=PL4KX3oEgJcfdiE-S3qLqATrsMg2Nddosx

4. opencv, tensorflow 
1) flutter에서 android용 opencv, tensorflow sdk 이용 -> 안드로이드스튜디오 필요, 복잡, 데스크탑이나 rpi 자료 없음.
2) opencv, tensorflow의 파이썬 코드를 flutter에서 읽어 들임 -> 방법 못 찾음. 모두 flet을 써서 파이썬으로 flutter처럼 만들라고 함.
3) 파이썬 플라스크 구동해서 flutter가 플라스크에 데이터를 요청하는 api 방식 -> 관련 자료 적음. 인기 없음.
4) flet이란 툴을 써서 파이썬 만 가지고 flutter 기능을 촬용하는 방법 -> 관련 자료 많고 인기 많음.
결론-> 아직까지 flutter를 이용해서 desktop/rpi 용으로 앱을 만드는 것은 무리. 안드로이드/ios에는 가능할 것으로 보임.

5. 결론
 1) 라즈베리파이 - tkinter 대신 import flet으로 파이썬 코딩. IDE는 윈도우/vscode ssh 접속, rpi에 vnc하여 run. 결과 확인
    -> Tkinter보다 조금 더 좋은 UI 수준으로 이해. 단, 화면 구성이 좀 더 간편. 단순. 유지보수 간편.
 2) 노트북/데스크탑 - flet으로 작성. 파이썬 코딩.
 3) 모바일 - flutter로 작성. opencv/tensorflow는 android/ios sdk 활용함.
 4) 웹 - flutter로 작성
 5) 학습량 -> flutter에 익숙해 지기->flet사용 가능.


BT Flutter 관련 내용 정리
[Flutter 학습]

코딩세프 : 단계별로 진행필요. 반드시 실습 병행
https://www.youtube.com/@codingchef
전 과정(순한맛~약간 매운맛) 학습+실습에 2주 정도 소요(대부분 의견)
힘들더라도 끝까지 완독하고, 또 이 과정을 2회 이상 반복해야 개념잡힘.
Flutter flow 라는 GUI 툴이 있으나 말대로 쉽지 않음. 코딩으로 위젯을 쌓아 올리는 것이 가장 일반적인 방법.

[설치 노트]
0. 설치 순서 : cmd라인에서 flutter 설치, flutter doctor 실행>Android Studio에서 flutter와 dart 플러그인 설치>
  vs code 설치>flutter extension 설치
0. vs code에서 새 프로젝트 생성 시 : View->Command Palette...>프로젝트이름
  안드로이드스튜디오와 vs code는 프로젝트 폴더 생성 방법이 조금 다름. (반복 연습해서 익숙해질 필요있음)
1. IDE는 Android Studio 사용함.
  VS Code는 에러 난다고 해서 중반부터 사용안함. 그러나 리모트 기능 포기 어려우므로 나중에 시도 필요
2. Flutter를 CMD에서 설치, flutter doctor 실행해서 오류는 반드시 해결할 것.(나중에 에러 발생원인)
3. 실제 안드로이드폰으로 에뮬 시, USB디버깅을 사용안함-사용함으로 변경 필요(pc를 변경할 때 마다)
4. 강좌 내용과 현재 플러터 많은 부분이 다르다(raisedbutton->elevatedbutton 등). 에러 시 구글검색으로 해결 필요
   
[에러 조치]
1. flutter doctor 에러는 구글 검색으로 해결
2. appbar에 leading iconbutton 하면 drawer와 충돌. leading~ 을 삭제할 것.
3. can not resolve symbol properies 에러 발생 시: 
 1) File>Project Structure>Project>SDK선택(33정도), Project Structure>SDKs>Build target  에서 sdk33 선택
https://stackoverflow.com/questions/56938436/first-flutter-app-error-cannot-resolve-symbol-properties
https://stackoverflow.com/questions/56938436/first-flutter-app-error-cannot-resolve-symbol-properties
4. 여러개 emulator를 나란히 보기: File > Settings > Tools > Emulator (Android Studio > Preferences > Tools > Emulator on macOS) and deselect Launch in a tool window.
 


[개념]
1. 플러터는 '위젯'으로 구성됨. 위젯은 모든 요소들(텍스트, 아이콘...)
2. Center는 모든 것을 중앙 정렬, 그 밑에 Column, 컬럼 안에 mainAxisAlignment
3. stateless 위젯은 텍스트 등 실행 중 변화 없는 위젯. stateful은 db 데이터 표시 등 변화 있는 위젯.
4. MyApp->MaterialApp->MyHomePage(여기까지는 이름 바꾸어도 됨)->Scaffold->AppBar->Text 순임 
5. const가 자주 나옴. 처음에는 지워도 되고, 나중에 숙련되면 붙여도 됨.
6. _ 표시가 붙은 것은 전역이 아니라는 뜻.

시즌1
순한맛 15 - drawer box decoration
순한맛 17 - 개념만 알고 넘어가기. 플러터 버전업으로 많이 바뀜
순한맛 18 -  Flatbutton->TextButton으로 바꾸고 스타일 지정도 많이 바뀜. 스낵바에 builder 추가 필요 없음.
순한맛 19 - Toast 작성 시, build.gradle에서 minSDK를 21로 바꿀 것.(토스트 모양 많이 바뀜).
               스낵바는 context 필요, 토스트는 context 필요없음.
               scaffoldmessenger로 바뀌었음.
순한맛 22 - Navigator 중요. push 익숙해 질 것.
순한맛 23 - 퀴즈 맞추기 어려움. 답 듣고 나서 이해함. 나중에 다중 페이지 만들 때 중요할 거 같음.
순한맛 24 - 상당 부분 바뀌었음. 그냥 generic/collection의 의미만 이해하면 됨.
순한맛 25~27 그동안 바뀐 부분(button, null safety, scaffoldmessenger 등)을 이야기하므로 24까지 왔으면 통과해도 됨.

시즌2 : 좀 더 기능에 대한 설명 추가. 그러나 다음 단계로 가는 데 꼭 알아야 하는 정도는 아님.
순한맛1 - Navigator 명령행이 좀 다름. Navigator.push(context~ 와 Navigator.of(context).push
             Image.asset과 AssetImage 헷갈림.

매운맛 2 - 잘 이해 안됨 몇 번 더 반복해서 볼 것. 특히 state, setstate
매운맛 4 - 11:36 부분이 어려울 수 있음. snackbar를 만들 때 context를 못 찾아갈 수도 있기 때문임.
매운맛 5 - toast 만들 때 에러남. 앱 수준 build.gradle에서 minSdkVersion 21 변경
매운맛 8 - Future, async, await 개념 이해할 것. 사용방법 익숙해질 것.
매운맛 9 - AndroiX는 반영된 지 꽤 되어서 굳이 내용 볼 필요 없음.
매운맛 10~12 앞선 내용중 개념의 심화학습이라 넘어감.
매운맛 13 - 여기서부터 본격적으로 권한, DB 접속, api 등 내용 나옴. 중요.
 	openweathermap.org에서 회원가입하고 api key 받음 무료.  My API key에서 확인
              홈페이지에서는 자꾸 version 3.0으로 유도함. 예제에서는 무료사용시 2.5로 해야 함.
              3.0 문서 보고나서 2.5로 대체할 것.
              경도와 위도를 소수점 2자리까지만 query 할 것.
              GPS 사용권한 설정 관련해서는 동영상의 내용이 오래 되서 안맞음. 구글 pub dev로 검색해서 따라 해야 함.
 	settings.gradle에서 kotlin 버전을 1.7.10 -> 1.8.10으로 변경해야 함.
              getLocation은 test25_GPS loading.dart  참조할 것.
웹브라우저에 넣어서 사전 테스트: https://api.openweathermap.org/data/2.5/weather?lat=37.40&lon=127.10&appid=6168cd1d58277ace019f84801fb5aece
매운맛 14 - get(Uri.parse('http:~~~')) 그리고 response.body. 인터넷은 런타임 권한 필요없음.
매운맛 15 - 28:00부터 중요. 데이터가 어떻게 전달될 수 있는가.
매운맛 16 - 구글폰트 사용법 검색할 것. Text('Seoul', style: GoogleFonts.lato(textStyle: TextStyle(color: Colors.blue,~
               time_builder등 모든 라이브러리는 동영상 따라 하지 말고, 최신 버전으로 설치할 것. 현재 시간 만들기 참조
매운맛 17 - Widget icon 에러 날 때 Widget? 및 icon! 사용할 것.
매운맛 23 - 파이어베이스 연동은 파이어베이스 홈페이지에서 flutter 앱추가 하는 방법을 홈페이지 지시대로만 따라한다.
               그리고 나서 동영상 참조하여 multidex 오류 조치한다.
               파이어베이스 플러터 추가 클릭하면 설명이 좀 헷갈릴 수 있다. 커맨드 명령행으로 할 수 있고 마우스로 할 수 있다.
               자주 해 보고 감 잡을 것.
               1) 파이어베이스홈페이지에서 추가 2) 마지막 option.dart는 수정하는 게 아니다. 3) initialize에 option을 추가 4) option.dart 임포트
매운맛 24 - 파이어베이스 앱 추가 마지막 단계에서 gradle(앱/프로젝트) 내용은 수정해도 에러난다. 수정하지 말것.
               대신 main.dart에서 firepaseoption import하고 await Firebase.initializeApp(
	    options: DefaultFirebaseOptions.currentPlatform,
	  ); 추가할 것. test21-복사본을 참조할 것.
매운맛 25 - 1) final docs에서 null error -> 동영상 댓글 확인 if(snapshot.hasData){~ 추가하면 됨.
                  동영상 20:57~21:51 부분은 작동안됨. 추가하지 말것. if(snapshot.connectionState~
          	2) firebase 반응 느림-> firebase 권한 부족 에러-> firebase 규칙에서 write~ true로 변경하면 됨.
  	2) modal_progress ~ 설치 후 flutter packages upgrade 한번 해 주어야 함.

매운맛 27 - 매운맛25에서 snapsho.docs 와 같은 코드인데 if(snapshot.hasData)안 하고도 에러 없음. 
매운맛 29 - userName null 에러 시, message.dart에는 userName: chatDocs[index].data()['userName'].toString() 
매운맛 30 - 신기하게도 카메라 권한 설정이 필요없다. 앱을 껏다가 켜도 에러가 사라지는 경우가 있다.
MySQL Part2. FormatException: Unexpected end of input (at character 1) 에러가 발생함. -> 소스코드 복사 후 추가하던 중 괄호 위치가 바뀌어서 오류 났음.
   	동영상과 소스 대로만 따라하면 에러 안남.
	
[Flutter Bluetooth]
1. 이 방법은 서버-클라이언트로 작동함. 즉 블루투스 테더링과 같은 개념. 와이파이 연결상태에서는
 와이파이 테드링이나 블루투스 테더링을 허용하지 않는 폰이 있다.(잘 모름)  
이 영상을 천천히 따라하면 됨. https://www.youtube.com/watch?v=3e0rz600OQk
권한은 manifest와 런타임에 설정하는데, flutter는 런타임 권한 설정이 매우 간결하다.
part2에서 권한없다는 에러나오면 home_screen.dart에서 아래와 같이 한다.
Future.wait([
      Permission.bluetooth.request(),
      Permission.bluetoothConnect.request(),
      Permission.bluetoothScan.request() -> 이줄을 추가함.
    ]);
WiFi가 연결된 상태에서는 블루투스테더링을 할 수 없어요 라는 알람뜸. 와이파이 연결끊고 블루투스 연결됨.

2. flutter_bluetooth_serial -> 이게 우리가 찾는 방법. rfcomm 소켓 통신
우선 상용의 시리얼통신 프로그램으로 기기간 테스트 먼저 하고 익숙해 진다.
Putty, Hercules Serial Monitor, TeraTerm, Realterm, Termite, Advance serial port monitor 등 다수 프로그램.
Top3. Docklight>Putty>ReamTerm

3. ssh로 통신하는 방법
ssh는 ip가 있어야 한다. 휴대폰 핫스팟 과 rpi 연결해서 ssh 할 수 있다. 그러나 기존 wifi는 끊어진다.
블루투스연결/와이파이설정(rfcomm 시리얼 프로그램 작성필요)->wifi ssid 스캔/선택/암호입력->ip 주소 알아내기 ->
상용ssh(안드로이드 mobile ssh 등)로 ip입력->안드로이드와 rpi 는 ssh로 연결됨.
유투브에 termius, ping tools 등이 있으나 우리에겐 필요없다. 단 mobile ssh는 필요할 수 있다.

4. 블루투스로 ssh 이용하는 방법 - Bluetooth PAN 이라고 한다.
자료가 거의 없고 옛날 자료들임.
 blueman을 사용해야 함. - blueman 불안정 문제 있음.
 즉 현재로는 블루투스만 가지고 ssh 수준 달성은 어려워 보임.

5. 모든 rpi에 hdmi무선변환기, 무선키보드 연결 준비상태로 만드는 방법
 원래 목적은 현대/기아, lg 등 내부보안, 반출입 불편을 해결하기 위한 것인데, 이렇게 되면 별도의 모니터와
 키보드 마우스를 반입해야 한다. 모든 것을 휴대폰만으로 해결하자는 취지에 벗어남.

우리의 선택!
1) 블루투스 시리얼 통신(rfcomm 소켓)으로 android-rpi 통신. rpi에는 항상 bt 프로그램이 운전중.
   - Rpi-Androdi 사이에는 블루투스 또는 와이파이 방법 밖에는 없다. 유선연결 제외.
   - 와이파이는 ssid/pw 등 설정 필요하므로 rpi headless mode에서는 초기부터 사용할 수는 없다.
   - 따라서 유일한 선택은, 최초 블루투스 연결이다.
2) wifi ssid 설정 등 우리가 하고 싶은 리눅스명령들을 버튼 형태로 만들어서 결과 얻는다. - bt 프로그램 작성 필요
3) 현장에서 rpi 내부를 조사하고 싶은데, 무선공유기와는 연결되어 있지 않는 상태라면 부득이
   연결된 wifi를 끊고 상기 4번의 작업을 한다.

* 참고
serial 통신은 기기간 케이블을 직접 연결. com port, speed 지정함.
rfcomm 은 블루투스 연결하여 게이블 연결 없이 serial 통신을 실현. com port speed 지정. 
 따라서 옛날 serial 통신프로그램 사용가능. rpi에서도 hci0(블루투스)를 rfcomm으로 지정할 수 있다.
 또, rfcomm은 http 통신을 에뮬레이터 할 수 있어서, 블루투스 연결 상태에서 소켓 통신을 할 수 있다. 
소켓통신은 http. 랜선을 통하여 통신
결론. 
 1) 옛날 시리얼 통신은 rs232c, 요즘은 ethernet.  모두 유선이다.(와이파이 제외)
 2) rfcomm은 블루투스 연결된 기기간에 시리얼통신 또는 소켓 통신을 가능하게 해 주는 에뮬레이터다.

스터디가 필요한 항목(android-rpi간 bt통신)
Flutter : flutter_bluetooth_serial. (all_bluetooth는 서버/클라이언트 방식이라 우리 목적과 안 맞음)
RPI : bluedot/pyserial(python),  bluedot은 서버/클라이언트 방식으로 추정. 확인 필요. 상용 안드로이드앱도 있다.
       단, rpi를 서버로 할 수 있으므로 안드로이드 테더링과 충돌은 없을 듯.
ESP32:  Serial
