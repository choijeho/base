목표: PC-RPi-Android 상호 BT 통신 

[PC-PC window 10]
참조 : https://www.youtube.com/watch?v=8pMaR-WUc6U&t=533s 
1. 준비: 데스크탑 PC(서버) , 노트북(클라이언트)
2. 데스크탑에서
 1) 블루투스 어댑터 검색, MAC 주소 확인
 2) server.py 작성
3. 노트북에서
 1) 안해도 되는 사항 : 블루투스 어댑터 검색, MAC 주소 확인. (서버만 알면 됨)
 2) client.py 작성
4. 데스크탑에서 server.py 실행하고 노트북에서 client.py 실행함.
 특기사항> 이 과정에서 블루투스 연결 확인 또는 키를 묻는 팝업 화면 안 나오는 것이 정상.
5. 데스크탑에서 임의의 메시지 작성하고 엔터
6. 노트북에서는 데스크탑으로 부터 받은 메시지 확인하고 임의의 메시지 작성/엔터
7. 완료
9. 상세 방법
 1) 블루투스 어댑터 찾기
  윈도우 왼쪽하단 톱니바퀴->시스템->정보->장치관리자->Bluetooth->Realtek Bluetooth 5.3 Adapter->속성->고급->주소 기록함
  * Realtek Bluetooth 5.3 Adapter 대신, 노트북 또는 오디세이에서는 인텔(R) 무선 Bluetooth(R)을 선택함.
  * Bluetooth Device(RFCOMM Protocol TDI), Microsoft Bluetooth LE 열거자, Mi Speaker 등은 해당안됨. 삭제할 필요는 없음
 2) 블루투스 어댑터 고장 해결
  장치관리자에서 확인한 블루투스 어댑터가 작동하지 않고 있다고 표시되면,
  제어판(장치관리자 아님)->장치 및 프린터 보기-> Bluetooth 5.3 Radio->마우스 우버튼->문제해결->조치(드라이버 업데이트, 재부팅 등)
  
# server.py

import socket

server=socket.socket(socket.AF_BLUETOOTH, socket.SOCK_STREAM, socket.BTPROTO_RFCOMM)
server.bind(("8c:88:4b:65:b9:2a", 4)) # bluetooth adapter DT-CHOI 서버 PC에서 검색한 BT 어댑터의 MAC 주소
server.listen(1)

client, addr = server.accept()

try:
    while True:
        data = client.recv(1024)
        if not data:
            break
        print(f"Message: {data.decode('utf-8')}")
        message=input("Enter message: ")
        client.send(message.encode("utf-8"))
except OSError as e:
    pass

# client.py

import socket

client=socket.socket(socket.AF_BLUETOOTH, socket.SOCK_STREAM, socket.BTPROTO_RFCOMM)
client.connect(("8c:88:4b:65:b9:2a", 4)) # 서버의 BT MAC 주소이다. 클라이언트의 BT MAC 주소는 필요없음.

try:
    while True:
        message = input("Enter message: ")
        client.send(message.encode("utf-8"))
        data=client.recv(1024)
        if not data:
            break
        print(f"Message: {data.decode('utf-8')}")
except OSError as e:
    pass

client.close()

[RPi-RPi raspbian 11 bulls eye]
참조: https://people.csail.mit.edu/albert/bluez-intro/x232.html -> 먼저 pybluez install 부터 할 것.
1. 블루투스 라이브러리 설치
 sudo apt-get install bluez libbluetooth-dev pi-bluetooth
 pip3 install pybluez (또는 sudo apt-get install pybluez)
 위 2 명령을 차례대로 입력/엔터. 단, 2번째만 입력해도 되는 경우가 있었음.
2. 서버 RPi 에서, 블루투스 주소 확인
 bluetoothctl
 [bluetooth]# discoverable on
 참고 bluetoothctl 종료는 quit
 server.py 실행함.
3. 클라이언트 RPi에서, 
 bluetoothctl-필요없음
 [bluetooth]# discoverable on-필요없음
 client.py 실행함.
4. 서버 RPi에서 b'hello' 수신됨 확인
 특기사항> 모든 과정에서 블루투스 연결 확인 또는 키를 묻는 팝업 화면 안 나오는 것이 정상.->raspbian에서 개선된 것으로 추정.
           다만, rpi에서는 서버쪽에서는 팝업화면 없고, 클라이언트에서는 연결성공 이라는 팝업 화면 나옴.
5. 자료

#server.py

import bluetooth

server_sock=bluetooth.BluetoothSocket( bluetooth.RFCOMM )

port = 1
server_sock.bind(("",port))
server_sock.listen(1)

client_sock,address = server_sock.accept()
print "Accepted connection from ",address

data = client_sock.recv(1024)
print "received [%s]" % data

client_sock.close()
server_sock.close()

# client.py

import bluetooth

bd_addr = "01:23:45:67:89:AB"

port = 1

sock=bluetooth.BluetoothSocket( bluetooth.RFCOMM )
sock.connect((bd_addr, port))

sock.send("hello!!")

sock.close()

[RPi-PC raspbian 11 bulls eye, Window 10]
참고 : 위의 2개 프로그램에서 host, port no 만 변경하고, 서버에서는 채팅 대신 1회 수신해서 화면 출력하는 것으로 코드 수정함.
      서버가 PC, 클라이언트는 RPi
1. rpi에 블루투스 라이브러리 설치 과정 없음. 서버 블루투스 주소 확인한 상태
2. bluetoothctl 과정 없음. 단, RPi가 서버일 경우는 필요함.
3. PC에서 server_rpi.py 실행함.
3. 클라이언트 RPi에서 client.py 실행함. (서버 address, port no 4 만 변경했음)
4. 서버 PC 에서 'hello' 수신됨 확인
 특기사항> 모든 과정에서 PC나 RPi 모두 다, 블루투스 연결 확인 또는 키를 묻는 팝업 화면 안 나오는 것이 정상.->raspbian에서 개선된 것으로 추정.
           다만, 클라이언트 rpi 에서는 연결성공 이라는 팝업 화면 나옴.
5. 자료
# server_rpi.py
 server.py와 동일하고, 15행 message = input...과 16행 client.send(mess... 만 삭제했음
# client.py
 상기 client.py와 동일하고, address, port 4만 수정했음.
